@startuml "La biblioteca"

class Libro {
    # ISBN:string
    # nombreLibro:string
    # editorial:string
    # anio:number
    # autor:Autor
    # tipoLibro: TipoLibro

    getISBN(): string
    getNombreLibro(): string

}

enum TipoLibro {
    NOVELA,
    TEATRO,
    POESIA,
    ENSAYO
}

class Autor {
    - nombreAutor:string
    - nacionalidad:string
    - fechaNacimiento:string
}

class Copia extends Libro {
    - idCopia:string
    - estatusCopia:EstatusCopia
    + cambiarEstatusCopia(EstatusCopia):void
    + getIdCopia(): string
    + getEstatusCopia(): string 
}

enum EstatusCopia {
    EN_BIBLIOTECA,
    PRESTADA,
    CON_RETRASO,
    EN_REPARACION,
    DEVUELTA
}

class Biblioteca {

    - NUMERO_MAX_PRESTAMOS:number
    - NUMERO_MAX_DIAS:number
    - DIAS_DE_MULTA:number
    - NUMERO_MAX_COPIAS:number

    + nombreBiblioteca:string

    - copias[]:Copia
    - prestamos[]:Prestamo
    - lectores[]:Lector

    + inscribirLector(string, string, number):void
    + crearCopias(Libro):Copia
    + traerCopias():Copia[]
    - buscarLectorPorId(string):Lector
    - buscarCopiaPorId(string):Copia
    + prestarLibro(string, string):ResponseMessage
    + mostrarPrestamos(): Prestamos[]
    - verificarSolvencia(Prestamo):ResponseMessage
    + devolverLibro(idCopia:string): ResponseMessage 
    + repararCopia(idCopia: string): ResponseMessage
    - sumarDias(Date, number):Date
    + quitarMulta(Lector):ResposeMessage
    
}

class Persona {
    # _id: string
    # _nombresApellidos: string
    # _edad: number

    + getId():string
    + getNombresApellidos():string
    + getEdad():number
}

class Lector extends Persona{
    - _estaSolvente: boolean
    - _registros:Registros[]
    - _numeroCopias: number

    + getEstaSolvente():boolean
    + setEstaSolvente(boolean):void
    + getMultadoHastaEl():string
    + setMultadoHastaEl(string):void
    + getRegistrosPrestamosPorLector(): Registro[]
    + registrarPrestamoLector(registro:Registro) : void
    + numeroCopiasPrestadasActualmente(): number
    + devolverCopia(idCopia: string): void 

}

class Prestamo {
    - idPrestamo:string
    - lector:Lector
    - copia:Copia
    - _fechaPrestamo:Date
    - _fechaDevolucion:Date

    getgetIdCopia():string
    getgetLector():Lector
    getgetCopia():Copia
    getfechaPrestamo():Date    
    getfechaDevolucion():Date
}

interface Registro {
    idCopia: string
    nombreCopia: string
    fechaPrestamo: string
    fechaMaxDevolucion:string
    fechaRealDevolucion:string
    estatusCopia: EstatusCopia
}


TipoLibro <-- Libro: "Es de tipo"
Autor "1" <-- "1" Libro: "ha sido escrito por"
EstatusCopia "1" <-- "1" Copia: "tiene"
Biblioteca "1" *-- "1..*" Lector: "congrega a"
Biblioteca "1" *-- "1..*" Copia: "se compone de"
Biblioteca "1" *-- "1..*" Prestamo: "se compone de"
Registro .. Lector

@enduml